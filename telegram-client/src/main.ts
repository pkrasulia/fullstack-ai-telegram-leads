import dotenv from "dotenv";
import { Message } from "node-telegram-bot-api";
import { checkAdkConnection, getOrCreateUserSession, loadUserSessions, saveUserSessions, sendMessageToAdk } from "services/adk-service";
import { TelegramService } from "./services/telegram-service";
import { MessageStorageService, MessageDirection } from "./services/message-storage-service";
import { mainLogger } from "./app/logs/logger";

dotenv.config({ path: "../../.env" });

const token: string = process.env.TELEGRAM_BOT_TOKEN || "7859566653:AAG8JfRotqlK5FldOYMZm9X6MQG48r_2GGw";
const adkBaseUrl: string = process.env.ADK_BASE_URL || "http://agent:8000";
const appName: string = process.env.ADK_APP_NAME || "telegram-assistant";

mainLogger.info("Telegram assistant started with ADK integration");
mainLogger.info("Configuration check:");
mainLogger.info(`- Telegram Bot Token: ${token.length > 10 ? "Configured" : "Missing"}`);
mainLogger.info(`- ADK Base URL: ${adkBaseUrl}`);
mainLogger.info(`- App Name: ${appName}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
if (!token || token === "YOUR_BOT_TOKEN_HERE") {
  mainLogger.error("ERROR: Telegram Bot Token not found in .env file");
  process.exit(1);
}

const telegramService = new TelegramService(token);
const messageStorageService = new MessageStorageService();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
let assistantEnabled = true;
const SESSIONS_FILE = "user_sessions.json";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
interface UserSession {
  userId: string;
  sessionId: string;
  userName: string;
  lastMessageTime: number;
  totalMessages: number;
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSessions = new Map<number, UserSession>();

// Fallback response when ADK is unavailable
function getFallbackResponse(): string {
  const responses = ["Service temporarily unavailable. Please try again.", "Connection error. Retrying...", "Technical issues detected. Please retry your request."];
  return responses[Math.floor(Math.random() * responses.length)];
}

// Business connection handler
telegramService.onBusinessConnection((connection: any) => {
  mainLogger.info("Business account connection", {
    user: connection.user.first_name,
    connectionId: connection.id,
  });
});

// –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ business —Å–æ–æ–±—â–µ–Ω–∏–π
telegramService.onBusinessMessage(async (msg: any) => {
  if (!assistantEnabled) return;

  const chatId = msg.chat.id;
  const messageText = msg.text || "";
  const businessConnectionId = msg.business_connection_id;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  await messageStorageService.saveIncomingMessage(msg, true, businessConnectionId);

  mainLogger.info("Business message received", {
    chatId,
    messageText: messageText.substring(0, 100),
    userName: msg.from?.first_name || "Unknown",
    businessConnectionId
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
  if (messageText.startsWith('/')) {
    mainLogger.info("Business message is a command, processing separately", { command: messageText });
    return; // –ö–æ–º–∞–Ω–¥—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ ADK
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    const userName = msg.from?.first_name || "Unknown";
    const session = await getOrCreateUserSession(chatId, userName);
    if (!session) {
      mainLogger.error("Failed to get user session", { chatId, userName });
      await telegramService.sendMessage(chatId, getFallbackResponse(), businessConnectionId);
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ADK
    const adkResponse = await sendMessageToAdk(session, messageText);

    let responseText: string;
    if (adkResponse) {
      responseText = adkResponse;
      session.totalMessages++;
    } else {
      responseText = getFallbackResponse();
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —ç–º—É–ª—è—Ü–∏–µ–π –ø–µ—á–∞—Ç–∏
    await telegramService.sendMessageWithTyping(chatId, responseText, businessConnectionId);

    mainLogger.info("Response sent", { userName, chatId, responseLength: responseText.length });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏–∏
    saveUserSessions();
  } catch (error: any) {
    mainLogger.error("Critical error in main logic", {
      message: error?.message,
      stack: error?.stack,
      chatId,
      userName: msg.from?.first_name || "Unknown",
    });

    const fallbackResponse = getFallbackResponse();
    await telegramService.sendMessage(chatId, fallbackResponse, businessConnectionId);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ business)
telegramService.onMessage(async (msg: Message) => {
  if (!assistantEnabled || !msg.text) return;

  const chatId = msg.chat.id;
  const messageText = msg.text;
  const userName = msg.from?.first_name || "user";

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  await messageStorageService.saveIncomingMessage(msg, false);

  mainLogger.info("Regular message received", {
    userName,
    chatId,
    messageText: messageText.substring(0, 100) + (messageText.length > 100 ? "..." : ""),
  });

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    const session = await getOrCreateUserSession(chatId, userName);
    if (!session) {
      await telegramService.sendMessage(chatId, getFallbackResponse());
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ADK
    const adkResponse = await sendMessageToAdk(session, messageText);

    let responseText: string;
    if (adkResponse) {
      responseText = adkResponse;
      session.totalMessages++;
    } else {
      responseText = getFallbackResponse();
    }

    // –≠–º—É–ª—è—Ü–∏—è –ø–µ—á–∞—Ç–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await telegramService.simulateTyping(chatId, undefined, responseText);
    await telegramService.sendMessage(chatId, responseText);

    mainLogger.info("Response sent", { userName, chatId, responseLength: responseText.length });
    saveUserSessions();
  } catch (error: any) {
    mainLogger.error("Error processing regular message", {
      message: error?.message,
      chatId,
      userName,
    });
    await telegramService.sendMessage(chatId, getFallbackResponse());
  }
});

// –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
telegramService.onCommand(/\/start/, (msg: Message) => {
  const helpMessage = `
ü§ñ **Telegram Assistant (ADK + History)**

üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**
- Google Agent Development Kit
- Telegram Business API
- –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏

üìä **–°—Ç–∞—Ç—É—Å:** ${assistantEnabled ? "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" : "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}
üë• **–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:** ${userSessions.size}

‚öôÔ∏è **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/on - –≤–∫–ª—é—á–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
/off - –≤—ã–∫–ª—é—á–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞  
/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/sessions - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏

üìö **–†–∞–±–æ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π:**
/print_history - –≤—ã–≤–µ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å (–ø—Ä–æ—Å—Ç–æ–π)
/history - –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
/advanced_history - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∑–∞—Ö–≤–∞—Ç–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
/export_leads - —ç–∫—Å–ø–æ—Ä—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤
/export_advanced_leads - –¥–µ—Ç–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Å –æ—Ü–µ–Ω–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞ –ª–∏–¥–æ–≤

üõ† **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏:**
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏
/save - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏–∏

üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è:**
- ADK URL: ${adkBaseUrl}
- App Name: ${appName}

üí° **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏:**
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (email, —Ç–µ–ª–µ—Ñ–æ–Ω—ã)
- –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ª–∏–¥–æ–≤
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
- –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–æ—Ä–º–∞—Ç
    `;

  telegramService.sendMessage(msg.chat.id, helpMessage);
});

telegramService.onCommand(/\/sessions/, (msg: Message) => {
  const chatId = msg.chat.id;
  const userSession = userSessions.get(chatId);

  if (!userSession) {
    telegramService.sendMessage(chatId, "No active session found. Send any message to create one.");
    return;
  }

  const sessionInfo = `
Session Information:

Name: ${userSession.userName}
User ID: ${userSession.userId}
Session ID: ${userSession.sessionId}
Messages: ${userSession.totalMessages}
Last activity: ${new Date(userSession.lastMessageTime).toLocaleString("en-US")}

ADK App: ${appName}
ADK URL: ${adkBaseUrl}
  `;

  telegramService.sendMessage(chatId, sessionInfo);
});

telegramService.onCommand(/\/save/, (msg: Message) => {
  saveUserSessions();
  telegramService.sendMessage(msg.chat.id, "Sessions force saved successfully.");
});

telegramService.onCommand(/\/on/, (msg: Message) => {
  assistantEnabled = true;
  telegramService.sendMessage(msg.chat.id, "AI assistant ENABLED. Ready to work with ADK.");
});

telegramService.onCommand(/\/off/, (msg: Message) => {
  assistantEnabled = false;
  telegramService.sendMessage(msg.chat.id, "AI assistant DISABLED");
});

telegramService.onCommand(/\/status/, (msg: Message) => {
  const status = assistantEnabled ? "ACTIVE" : "INACTIVE";
  const activeSessions = userSessions.size;
  const totalMessages = Array.from(userSessions.values()).reduce((sum, session) => sum + session.totalMessages, 0);

  telegramService.sendMessage(
    msg.chat.id,
    `
Telegram Assistant Status (ADK):

State: ${status}
Active sessions: ${activeSessions}
Total messages: ${totalMessages}
ADK URL: ${adkBaseUrl}
App Name: ${appName}
Sessions file: ${SESSIONS_FILE}
Started: ${new Date().toLocaleString("en-US")}

Send any message to test functionality
    `,
  );
});

telegramService.onCommand(/\/clear/, (msg: Message) => {
  const clearedCount = userSessions.size;
  userSessions.clear();
  saveUserSessions();
  telegramService.sendMessage(msg.chat.id, `Cleared ${clearedCount} sessions`);
});

// –£–¥–∞–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π - –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.on('SIGINT', () => {
  mainLogger.info("Telegram assistant shutting down...");
  mainLogger.info("Saving sessions...");
  saveUserSessions();
  telegramService.stopPolling();
  mainLogger.info("All data saved. Goodbye!");
  process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  mainLogger.error("Uncaught Exception", { 
    message: error.message, 
    stack: error.stack 
  });
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  mainLogger.error("Unhandled Rejection", { 
    reason: reason, 
    promise: promise 
  });
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ADK
(async () => {
  try {
    await checkAdkConnection();
    mainLogger.info("‚úÖ ADK connection successful");
  } catch (error) {
    mainLogger.warn("‚ö†Ô∏è ADK connection failed - using fallback responses");
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  loadUserSessions();
  mainLogger.info(`üì± Telegram assistant is ready! Loaded ${userSessions.size} user sessions`);
})();

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
setInterval(
  () => {
    saveUserSessions();
  },
  5 * 60 * 1000,
); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
setInterval(
  () => {
    const threeDaysAgo = Date.now() - 3 * 24 * 60 * 60 * 1000; // 3 –¥–Ω—è
    let removedCount = 0;

    for (const [chatId, session] of userSessions.entries()) {
      if (session.lastMessageTime < threeDaysAgo) {
        userSessions.delete(chatId);
        removedCount++;
      }
    }

    if (removedCount > 0) {
      mainLogger.info("Session cleanup completed", {
        removedCount,
        activeCount: userSessions.size,
      });
      saveUserSessions();
    }
  },
  60 * 60 * 1000,
); // –ö–∞–∂–¥—ã–π —á–∞—Å

// –£–¥–∞–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ - –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
setInterval(
  () => {
    saveUserSessions();
  },
  5 * 60 * 1000,
); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
setInterval(
  () => {
    const threeDaysAgo = Date.now() - 3 * 24 * 60 * 60 * 1000; // 3 –¥–Ω—è
    let removedCount = 0;

    for (const [chatId, session] of userSessions.entries()) {
      if (session.lastMessageTime < threeDaysAgo) {
        userSessions.delete(chatId);
        removedCount++;
      }
    }

    if (removedCount > 0) {
      mainLogger.info("Session cleanup completed", {
        removedCount,
        activeCount: userSessions.size,
      });
      saveUserSessions();
    }
  },
  60 * 60 * 1000,
); // –ö–∞–∂–¥—ã–π —á–∞—Å

loadUserSessions();
checkAdkConnection();

// Graceful shutdown —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–π
process.on("SIGINT", () => {
  mainLogger.info("Telegram assistant (ADK) shutting down...");
  mainLogger.info("Saving sessions...");
  saveUserSessions();
  telegramService.stopPolling();
  mainLogger.info("All data saved. Goodbye!");
  process.exit(0);
});
