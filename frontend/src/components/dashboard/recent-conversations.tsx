import React, { useRef } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import { MessageSquare, Send, Clock, ThumbsUp } from 'lucide-react';
import { useDrag } from '@use-gesture/react';
import { animated, useSpring } from '@react-spring/web';

type Conversation = {
  id: number;
  channel: 'Telegram' | 'WhatsApp' | 'Web Chat';
  user: string;
  lastMessage: string;
  time: string;
  status: 'resolved' | 'pending' | 'new';
  aiResponse: string;
  satisfaction: 'positive' | 'neutral' | 'negative';
  messageCount: number;
};

const channelIcons = {
  Telegram: 'üì±',
  WhatsApp: 'üìû',
  'Web Chat': 'üíª',
};

const statusColors = {
  resolved: 'bg-green-500',
  pending: 'bg-yellow-500',
  new: 'bg-blue-500',
};

const satisfactionColors = {
  positive: 'bg-green-500',
  neutral: 'bg-gray-500',
  negative: 'bg-red-500',
};

export const RecentConversations: React.FC = () => {
  const conversations: Conversation[] = [
    {
      id: 1,
      channel: 'Telegram',
      user: '–ê–ª–µ–∫—Å–µ–π',
      lastMessage: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!',
      time: '5 –º–∏–Ω –Ω–∞–∑–∞–¥',
      status: 'resolved',
      aiResponse:
        '–†–∞–¥ –ø–æ–º–æ—á—å! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è.',
      satisfaction: 'positive',
      messageCount: 5,
    },
    {
      id: 2,
      channel: 'WhatsApp',
      user: '–ú–∞—Ä–∏—è',
      lastMessage: '–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?',
      time: '15 –º–∏–Ω –Ω–∞–∑–∞–¥',
      status: 'pending',
      aiResponse:
        '–Ø –ø—Ä–æ–≤–µ—Ä—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.',
      satisfaction: 'neutral',
      messageCount: 3,
    },
    {
      id: 3,
      channel: 'Web Chat',
      user: '–ò–≤–∞–Ω',
      lastMessage: '–ö–∞–∫ –º–Ω–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç?',
      time: '1 —á–∞—Å –Ω–∞–∑–∞–¥',
      status: 'new',
      aiResponse: '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ...',
      satisfaction: 'neutral',
      messageCount: 1,
    },
    {
      id: 4,
      channel: 'Telegram',
      user: '–ï–ª–µ–Ω–∞',
      lastMessage: '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å!',
      time: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
      status: 'resolved',
      aiResponse: '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å.',
      satisfaction: 'positive',
      messageCount: 7,
    },
    {
      id: 5,
      channel: 'WhatsApp',
      user: '–î–º–∏—Ç—Ä–∏–π',
      lastMessage: '–ú–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞?',
      time: '3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
      status: 'pending',
      aiResponse: '–ö–æ–Ω–µ—á–Ω–æ, —è —Å–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ.',
      satisfaction: 'neutral',
      messageCount: 2,
    },
  ];

  const scrollRef = useRef<HTMLDivElement>(null);
  const [{ x }, api] = useSpring(() => ({ x: 0 }));

  const bind = useDrag(({ movement: [mx], down }) => {
    api.start({ x: down ? mx : 0, immediate: down });
  });

  return (
    <ScrollArea className="w-full whitespace-nowrap rounded-md border">
      <animated.div
        {...bind()}
        style={{ x }}
        ref={scrollRef}
        className="flex w-max space-x-4 p-4 cursor-grab active:cursor-grabbing"
      >
        {conversations.map((conv) => (
          <Card
            key={conv.id}
            className="w-[300px] shadow-lg hover:shadow-xl transition-shadow duration-300"
          >
            <CardContent className="p-4">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center space-x-2">
                  <Avatar>
                    <AvatarFallback>{conv.user[0]}</AvatarFallback>
                    <AvatarImage
                      src={`https://api.dicebear.com/6.x/initials/svg?seed=${conv.user}`}
                    />
                  </Avatar>
                  <div>
                    <p className="font-semibold">{conv.user}</p>
                    <div className="flex items-center text-sm text-gray-500">
                      <span className="mr-1">{channelIcons[conv.channel]}</span>
                      <span>{conv.channel}</span>
                    </div>
                  </div>
                </div>
                <Badge
                  variant="outline"
                  className={`${statusColors[conv.status]} text-white`}
                >
                  {conv.status}
                </Badge>
              </div>
              <div className="mb-2">
                <p className="text-sm font-medium">–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</p>
                <p className="text-sm truncate">{conv.lastMessage}</p>
              </div>
              <div className="mb-2">
                <p className="text-sm font-medium">–û—Ç–≤–µ—Ç AI:</p>
                <p className="text-sm truncate">{conv.aiResponse}</p>
              </div>
              <div className="flex items-center justify-between text-sm text-gray-500">
                <div className="flex items-center space-x-1">
                  <Clock className="w-3 h-3" />
                  <span>{conv.time}</span>
                </div>
                <div className="flex items-center space-x-1">
                  <MessageSquare className="w-3 h-3" />
                  <span>{conv.messageCount}</span>
                </div>
                <div className="flex items-center space-x-1">
                  <Send className="w-3 h-3" />
                  <span>AI</span>
                </div>
                <div className="flex items-center">
                  <ThumbsUp
                    className={`w-3 h-3 ${satisfactionColors[conv.satisfaction]}`}
                  />
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </animated.div>
      <ScrollBar orientation="horizontal" />
    </ScrollArea>
  );
};
