services:
  postgres:
    image: postgres:17.5-alpine
    container_name: postgres-prod
    restart: unless-stopped
    env_file:
      - .env.shared
    volumes:
      - ai-chat-db:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network
    # No exposed ports for production security

  redis:
    image: redis:7-alpine
    container_name: redis-prod
    restart: unless-stopped
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - app-network
    # No exposed ports for production security

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: backend-prod
    restart: unless-stopped
    env_file:
      - .env.shared
      - .env.backend
    ports:
      - "4343:4343"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4343/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      target: production
    container_name: frontend-prod
    restart: unless-stopped
    env_file:
      - .env.frontend
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  telegram-client:
    build:
      context: ./telegram-client
      dockerfile: Dockerfile
      target: production
    container_name: telegram-client-prod
    restart: unless-stopped
    env_file:
      - .env.shared
      - .env.telegram
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  agent:
    build:
      context: ./agent
      dockerfile: Dockerfile
      target: production
    container_name: agent-prod
    restart: unless-stopped
    env_file:
      - .env.shared
      - .env.agent
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

volumes:
  ai-chat-db:
  redis-data:

networks:
  app-network:
    driver: bridge
