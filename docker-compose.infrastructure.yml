services:
  postgres:
    image: postgres:17.5-alpine
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env.shared
    ports:
      - ${DATABASE_PORT:-5432}:5432
    volumes:
      - ai-chat-db:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  maildev:
    build:
      context: .
      dockerfile: backend/maildev.Dockerfile
    container_name: maildev
    restart: unless-stopped
    env_file:
      - .env.shared
    ports:
      - ${MAIL_CLIENT_PORT:-1080}:1080
      - ${MAIL_PORT:-1025}:1025
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:1080"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  adminer:
    image: adminer:latest
    container_name: adminer
    restart: unless-stopped
    ports:
      - 8080:8080
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - app-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    ports:
      - 8081:8081
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network

volumes:
  ai-chat-db:
  redis-data:

networks:
  app-network:
    driver: bridge
